{"ast":null,"code":"import { createReducer, on } from '@ngrx/store';\nimport * as AuthActions from './auth.actions';\nconst initialState = {\n  token: null\n};\nexport const authReducer = createReducer(initialState, on(AuthActions.loginSuccess, (state, {\n  token\n}) => {\n  return {\n    ...state,\n    token\n  };\n}), on(AuthActions.logout, state => {\n  return {\n    ...state,\n    token: null\n  };\n}));\nexport function reducer(state, action) {\n  return authReducer(state, action);\n}","map":{"version":3,"names":["createReducer","on","AuthActions","initialState","token","authReducer","loginSuccess","state","logout","reducer","action"],"sources":["/home/devmonk--/thime/ngrxex/Frontend/src/app/store/auth/auth.reducer.ts"],"sourcesContent":["import { createReducer, on, Action } from '@ngrx/store';\nimport * as AuthActions from './auth.actions';\nimport { CookieService } from 'ngx-cookie-service';\n\nexport interface AuthState {\n  token: string | null;\n}\n\nconst initialState: AuthState = {\n  token: null,\n};\n\nexport const authReducer = createReducer(\n  initialState,\n  on(AuthActions.loginSuccess, (state, { token }) => {\n    return { ...state, token };\n  }),\n  on(AuthActions.logout, (state) => {\n    return { ...state, token: null };\n  })\n);\n\nexport function reducer(state: AuthState | undefined, action: Action) {\n  return authReducer(state, action);\n}\n"],"mappings":"AAAA,SAASA,aAAa,EAAEC,EAAE,QAAgB,aAAa;AACvD,OAAO,KAAKC,WAAW,MAAM,gBAAgB;AAO7C,MAAMC,YAAY,GAAc;EAC9BC,KAAK,EAAE;CACR;AAED,OAAO,MAAMC,WAAW,GAAGL,aAAa,CACtCG,YAAY,EACZF,EAAE,CAACC,WAAW,CAACI,YAAY,EAAE,CAACC,KAAK,EAAE;EAAEH;AAAK,CAAE,KAAI;EAChD,OAAO;IAAE,GAAGG,KAAK;IAAEH;EAAK,CAAE;AAC5B,CAAC,CAAC,EACFH,EAAE,CAACC,WAAW,CAACM,MAAM,EAAGD,KAAK,IAAI;EAC/B,OAAO;IAAE,GAAGA,KAAK;IAAEH,KAAK,EAAE;EAAI,CAAE;AAClC,CAAC,CAAC,CACH;AAED,OAAM,SAAUK,OAAOA,CAACF,KAA4B,EAAEG,MAAc;EAClE,OAAOL,WAAW,CAACE,KAAK,EAAEG,MAAM,CAAC;AACnC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}