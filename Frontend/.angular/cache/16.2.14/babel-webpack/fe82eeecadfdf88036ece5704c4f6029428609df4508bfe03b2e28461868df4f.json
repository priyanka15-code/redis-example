{"ast":null,"code":"import { ofType, createEffect } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport * as AuthActions from './auth.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../../login.service\";\nexport class AuthEffects {\n  constructor(actions$, authService) {\n    this.actions$ = actions$;\n    this.authService = authService;\n    this.login$ = createEffect(() => this.actions$.pipe(ofType(AuthActions.login), mergeMap(action => this.authService.login(action.username, action.password).pipe(map(data => AuthActions.loginSuccess({\n      token: data.token\n    })), catchError(error => of(AuthActions.loginFailure({\n      error\n    })))))));\n    this.register$ = createEffect(() => this.actions$.pipe(ofType(AuthActions.register), mergeMap(action => this.authService.register(action.username, action.password, action.email).pipe(map(() => AuthActions.registerSuccess({\n      username: action.username,\n      password: action.password,\n      email: action.email\n    })), catchError(error => of(AuthActions.registerFailure({\n      error\n    })))))));\n  }\n  static #_ = this.ɵfac = function AuthEffects_Factory(t) {\n    return new (t || AuthEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.LoginService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthEffects,\n    factory: AuthEffects.ɵfac\n  });\n}","map":{"version":3,"names":["ofType","createEffect","of","catchError","map","mergeMap","AuthActions","AuthEffects","constructor","actions$","authService","login$","pipe","login","action","username","password","data","loginSuccess","token","error","loginFailure","register$","register","email","registerSuccess","registerFailure","_","i0","ɵɵinject","i1","Actions","i2","LoginService","_2","factory","ɵfac"],"sources":["/home/devmonk--/thime/ngrxex/Frontend/src/app/store/auth/auth.effects.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Actions, ofType, createEffect } from '@ngrx/effects';\nimport {  of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { LoginService } from '../../login.service';\nimport * as AuthActions from './auth.actions';\n\n@Injectable()\nexport class AuthEffects {\n  login$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(AuthActions.login),\n      mergeMap((action) =>\n        this.authService.login(action.username, action.password).pipe(\n          map((data) => AuthActions.loginSuccess({ token: data.token })),\n          catchError((error) => of(AuthActions.loginFailure({ error })))\n        )\n      )\n    )\n  );\n  register$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(AuthActions.register),\n      mergeMap((action) =>\n        this.authService\n          .register(action.username, action.password, action.email)\n          .pipe(\n            map(() =>\n              AuthActions.registerSuccess({\n                username: action.username,\n                password: action.password,\n                email: action.email,\n              })\n            ),\n            catchError((error) => of(AuthActions.registerFailure({ error })))\n          )\n      )\n    )\n  );\n\n  constructor(private actions$: Actions, private authService: LoginService) {}\n}\n"],"mappings":"AACA,SAAkBA,MAAM,EAAEC,YAAY,QAAQ,eAAe;AAC7D,SAAUC,EAAE,QAAQ,MAAM;AAC1B,SAASC,UAAU,EAAEC,GAAG,EAAEC,QAAQ,QAAQ,gBAAgB;AAE1D,OAAO,KAAKC,WAAW,MAAM,gBAAgB;;;;AAG7C,OAAM,MAAOC,WAAW;EAgCtBC,YAAoBC,QAAiB,EAAUC,WAAyB;IAApD,KAAAD,QAAQ,GAARA,QAAQ;IAAmB,KAAAC,WAAW,GAAXA,WAAW;IA/B1D,KAAAC,MAAM,GAAGV,YAAY,CAAC,MACpB,IAAI,CAACQ,QAAQ,CAACG,IAAI,CAChBZ,MAAM,CAACM,WAAW,CAACO,KAAK,CAAC,EACzBR,QAAQ,CAAES,MAAM,IACd,IAAI,CAACJ,WAAW,CAACG,KAAK,CAACC,MAAM,CAACC,QAAQ,EAAED,MAAM,CAACE,QAAQ,CAAC,CAACJ,IAAI,CAC3DR,GAAG,CAAEa,IAAI,IAAKX,WAAW,CAACY,YAAY,CAAC;MAAEC,KAAK,EAAEF,IAAI,CAACE;IAAK,CAAE,CAAC,CAAC,EAC9DhB,UAAU,CAAEiB,KAAK,IAAKlB,EAAE,CAACI,WAAW,CAACe,YAAY,CAAC;MAAED;IAAK,CAAE,CAAC,CAAC,CAAC,CAC/D,CACF,CACF,CACF;IACD,KAAAE,SAAS,GAAGrB,YAAY,CAAC,MACvB,IAAI,CAACQ,QAAQ,CAACG,IAAI,CAChBZ,MAAM,CAACM,WAAW,CAACiB,QAAQ,CAAC,EAC5BlB,QAAQ,CAAES,MAAM,IACd,IAAI,CAACJ,WAAW,CACba,QAAQ,CAACT,MAAM,CAACC,QAAQ,EAAED,MAAM,CAACE,QAAQ,EAAEF,MAAM,CAACU,KAAK,CAAC,CACxDZ,IAAI,CACHR,GAAG,CAAC,MACFE,WAAW,CAACmB,eAAe,CAAC;MAC1BV,QAAQ,EAAED,MAAM,CAACC,QAAQ;MACzBC,QAAQ,EAAEF,MAAM,CAACE,QAAQ;MACzBQ,KAAK,EAAEV,MAAM,CAACU;KACf,CAAC,CACH,EACDrB,UAAU,CAAEiB,KAAK,IAAKlB,EAAE,CAACI,WAAW,CAACoB,eAAe,CAAC;MAAEN;IAAK,CAAE,CAAC,CAAC,CAAC,CAClE,CACJ,CACF,CACF;EAE0E;EAAC,QAAAO,CAAA,G;qBAhCjEpB,WAAW,EAAAqB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,OAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,YAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAX3B,WAAW;IAAA4B,OAAA,EAAX5B,WAAW,CAAA6B;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}