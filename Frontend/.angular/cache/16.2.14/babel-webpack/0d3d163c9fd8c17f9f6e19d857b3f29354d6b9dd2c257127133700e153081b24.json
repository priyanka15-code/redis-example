{"ast":null,"code":"import { ofType, createEffect } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { catchError, map, mergeMap, tap } from 'rxjs/operators';\nimport * as AuthActions from './auth.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../../login.service\";\nimport * as i3 from \"ngx-cookie-service\";\nexport class AuthEffects {\n  constructor(actions$, authService, cookieService) {\n    this.actions$ = actions$;\n    this.authService = authService;\n    this.cookieService = cookieService;\n    this.login$ = createEffect(() => this.actions$.pipe(ofType(AuthActions.login), mergeMap(action => this.authService.login(action.username, action.password).pipe(map(data => AuthActions.loginSuccess({\n      token: data.token\n    })), tap(action => {\n      this.cookieService.set('authToken', action.token);\n    }), catchError(error => of(AuthActions.loginFailure({\n      error\n    })))))));\n    this.register$ = createEffect(() => this.actions$.pipe(ofType(AuthActions.register), mergeMap(action => this.authService.register(action.username, action.password, action.email).pipe(map(() => AuthActions.registerSuccess({\n      username: action.username,\n      password: action.password,\n      email: action.email\n    })), catchError(error => of(AuthActions.registerFailure({\n      error\n    })))))));\n  }\n  static #_ = this.ɵfac = function AuthEffects_Factory(t) {\n    return new (t || AuthEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.LoginService), i0.ɵɵinject(i3.CookieService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthEffects,\n    factory: AuthEffects.ɵfac\n  });\n}","map":{"version":3,"names":["ofType","createEffect","of","catchError","map","mergeMap","tap","AuthActions","AuthEffects","constructor","actions$","authService","cookieService","login$","pipe","login","action","username","password","data","loginSuccess","token","set","error","loginFailure","register$","register","email","registerSuccess","registerFailure","_","i0","ɵɵinject","i1","Actions","i2","LoginService","i3","CookieService","_2","factory","ɵfac"],"sources":["/home/devmonk--/thime/ngrxex/Frontend/src/app/store/auth/auth.effects.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Actions, ofType, createEffect } from '@ngrx/effects';\nimport {  of } from 'rxjs';\nimport { catchError, map, mergeMap, tap } from 'rxjs/operators';\nimport { LoginService } from '../../login.service';\nimport * as AuthActions from './auth.actions';\nimport { CookieService } from 'ngx-cookie-service';\n\n\n@Injectable()\nexport class AuthEffects {\n\n  constructor(private actions$: Actions, private authService: LoginService, private cookieService: CookieService) {}\n  login$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(AuthActions.login),\n      mergeMap((action) =>\n        this.authService.login(action.username, action.password).pipe(\n          map((data) => AuthActions.loginSuccess({ token: data.token })),\n          tap((action) => {\n            this.cookieService.set('authToken', action.token);\n          }),\n          catchError((error) => of(AuthActions.loginFailure({ error })))\n        )\n      )\n    )\n  );\n  register$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(AuthActions.register),\n      mergeMap((action) =>\n        this.authService\n          .register(action.username, action.password, action.email)\n          .pipe(\n            map(() =>\n              AuthActions.registerSuccess({\n                username: action.username,\n                password: action.password,\n                email: action.email,\n              })\n            ),\n            catchError((error) => of(AuthActions.registerFailure({ error })))\n          )\n      )\n    )\n  );\n\n  \n}\n"],"mappings":"AACA,SAAkBA,MAAM,EAAEC,YAAY,QAAQ,eAAe;AAC7D,SAAUC,EAAE,QAAQ,MAAM;AAC1B,SAASC,UAAU,EAAEC,GAAG,EAAEC,QAAQ,EAAEC,GAAG,QAAQ,gBAAgB;AAE/D,OAAO,KAAKC,WAAW,MAAM,gBAAgB;;;;;AAK7C,OAAM,MAAOC,WAAW;EAEtBC,YAAoBC,QAAiB,EAAUC,WAAyB,EAAUC,aAA4B;IAA1F,KAAAF,QAAQ,GAARA,QAAQ;IAAmB,KAAAC,WAAW,GAAXA,WAAW;IAAwB,KAAAC,aAAa,GAAbA,aAAa;IAC/F,KAAAC,MAAM,GAAGZ,YAAY,CAAC,MACpB,IAAI,CAACS,QAAQ,CAACI,IAAI,CAChBd,MAAM,CAACO,WAAW,CAACQ,KAAK,CAAC,EACzBV,QAAQ,CAAEW,MAAM,IACd,IAAI,CAACL,WAAW,CAACI,KAAK,CAACC,MAAM,CAACC,QAAQ,EAAED,MAAM,CAACE,QAAQ,CAAC,CAACJ,IAAI,CAC3DV,GAAG,CAAEe,IAAI,IAAKZ,WAAW,CAACa,YAAY,CAAC;MAAEC,KAAK,EAAEF,IAAI,CAACE;IAAK,CAAE,CAAC,CAAC,EAC9Df,GAAG,CAAEU,MAAM,IAAI;MACb,IAAI,CAACJ,aAAa,CAACU,GAAG,CAAC,WAAW,EAAEN,MAAM,CAACK,KAAK,CAAC;IACnD,CAAC,CAAC,EACFlB,UAAU,CAAEoB,KAAK,IAAKrB,EAAE,CAACK,WAAW,CAACiB,YAAY,CAAC;MAAED;IAAK,CAAE,CAAC,CAAC,CAAC,CAC/D,CACF,CACF,CACF;IACD,KAAAE,SAAS,GAAGxB,YAAY,CAAC,MACvB,IAAI,CAACS,QAAQ,CAACI,IAAI,CAChBd,MAAM,CAACO,WAAW,CAACmB,QAAQ,CAAC,EAC5BrB,QAAQ,CAAEW,MAAM,IACd,IAAI,CAACL,WAAW,CACbe,QAAQ,CAACV,MAAM,CAACC,QAAQ,EAAED,MAAM,CAACE,QAAQ,EAAEF,MAAM,CAACW,KAAK,CAAC,CACxDb,IAAI,CACHV,GAAG,CAAC,MACFG,WAAW,CAACqB,eAAe,CAAC;MAC1BX,QAAQ,EAAED,MAAM,CAACC,QAAQ;MACzBC,QAAQ,EAAEF,MAAM,CAACE,QAAQ;MACzBS,KAAK,EAAEX,MAAM,CAACW;KACf,CAAC,CACH,EACDxB,UAAU,CAAEoB,KAAK,IAAKrB,EAAE,CAACK,WAAW,CAACsB,eAAe,CAAC;MAAEN;IAAK,CAAE,CAAC,CAAC,CAAC,CAClE,CACJ,CACF,CACF;EAjCgH;EAAC,QAAAO,CAAA,G;qBAFvGtB,WAAW,EAAAuB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,OAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,YAAA,GAAAL,EAAA,CAAAC,QAAA,CAAAK,EAAA,CAAAC,aAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAX/B,WAAW;IAAAgC,OAAA,EAAXhC,WAAW,CAAAiC;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}